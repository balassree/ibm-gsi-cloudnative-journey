{"version":3,"sources":["webpack:///./src/pages/developer-foundation/activities/labs/lab4/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Accordion","AccordionItem","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","title","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAYL,EAAc,aAC1BM,EAAgBN,EAAc,iBAC9BO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,E,oIACF,mBACD,OAAO,YAACM,EAAD,KAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAG5E,uEACA,8aAA6Z,0BAAYC,WAAW,KAAvB,YAA7Z,YAA8d,0BAAYA,WAAW,KAAvB,QAA9d,KACA,kCACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,8BAAkD,kBAAIA,WAAW,KAAf,kBAAlD,0CAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,8BAAkD,sBAAQA,WAAW,KAAnB,SAAlD,OAAmG,sBAAQA,WAAW,KAAnB,SAAnG,yFAGJ,0EACA,2PACA,kCACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,iCAAqD,kBAAIA,WAAW,KAAf,wBAArD,0CAAgJ,0BAAYA,WAAW,KAAvB,SAAhJ,kEAAoQ,kBAAIA,WAAW,KAAI,0BAAYA,WAAW,MAAvB,UAAnB,aAAoF,0BAAYA,WAAW,MAAvB,SAAxV,+DAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,cAAkC,0BAAYA,WAAW,KAAvB,iBAAlC,OAAmG,0BAAYA,WAAW,KAAvB,aAAnG,sBAGJ,oDAAmC,sBAAQA,WAAW,KAAnB,OAAnC,qBAAgG,sBAAQA,WAAW,KAAnB,UAAhG,uCACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,qCACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,iBACb,WAAc,SACd,QAAU,IAHO,mEAQzB,YAACR,EAAD,CAAWO,QAAQ,aACjB,YAACN,EAAD,CAAeQ,MAAM,SAASF,QAAQ,iBACpC,uBAAK,sBAAMC,WAAW,OAAU,IAA3B,6VAwBbH,EAAWK,gBAAiB","file":"component---src-pages-developer-foundation-activities-labs-lab-4-index-mdx-e8c320d8252982f4bf76.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bala/Documents/gsi-cloudnative-squad/ibm-gsi-cloudnative-journeyV1.1/ibm-gsi-cloudnative-journey/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Accordion = makeShortcode(\"Accordion\");\nconst AccordionItem = makeShortcode(\"AccordionItem\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h3>{`Problem Statement I - Container Health Issues`}</h3>\n    <p>{`The first issue is caused by application instances entering an unhealthy state and responding to user requests with error messages. Unfortunately, this state does not cause the container to stop, so the Kubernetes cluster is not able to detect this state and restart the container. Luckily, the application has an internal endpoint that can be used to detect whether or not it is healthy. This endpoint is `}<inlineCode parentName=\"p\">{`/healthz`}</inlineCode>{` on port `}<inlineCode parentName=\"p\">{`8080`}</inlineCode>{`.`}</p>\n    <h3>{`Solution`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Your first task will be to `}<em parentName=\"p\">{`create a probe`}</em>{` to check this endpoint periodically.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If the endpoint returns an `}<strong parentName=\"p\">{`error`}</strong>{` or `}<strong parentName=\"p\">{`fails`}</strong>{` to respond, the probe will detect this and the cluster will restart the container.`}</p>\n      </li>\n    </ul>\n    <h3>{`Problem Statement II -  Container Startup Issues`}</h3>\n    <p>{`Another issue is caused by new pods when they are starting up. The application takes a few seconds after startup before it is ready to service requests. As a result, some users are getting error message during this brief time.`}</p>\n    <h3>{`Solution`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To fix this, you will need to `}<em parentName=\"p\">{`create another probe`}</em>{`. To detect whether the application is `}<inlineCode parentName=\"p\">{`ready`}</inlineCode>{`, the probe should simply make a request to the root endpoint, `}<em parentName=\"p\"><inlineCode parentName=\"em\">{`/ready`}</inlineCode>{`, on port `}<inlineCode parentName=\"em\">{`8080`}</inlineCode></em>{`. If this request succeeds, then the application is ready.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Also set a `}<inlineCode parentName=\"p\">{`initial delay`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`5 seconds`}</inlineCode>{` for the probes.`}</p>\n      </li>\n    </ul>\n    <p>{`Here is the Pod yaml file,  `}<strong parentName=\"p\">{`add`}</strong>{` the probes, then `}<strong parentName=\"p\">{`create`}</strong>{` the pod in the cluster to test it.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create the service container pod.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\",\n            \"metastring\": \"script\",\n            \"script\": true\n          }}>{` oc apply -f energy-shield-service.yaml -n {DEV_NAMESPACE}\n`}</code></pre>\n      </li>\n    </ul>\n    <Accordion mdxType=\"Accordion\">\n      <AccordionItem title=\"Probes\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: energy-shield-service\nspec:\n  containers:\n  - name: energy-shield\n    image: ibmcase/energy-shield:1\n    livenessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n    readinessProbe:\n      httpGet:\n        path: /ready\n        port: 8080\n      initialDelaySeconds: 5\n`}</code></pre>\n      </AccordionItem>\n    </Accordion>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}