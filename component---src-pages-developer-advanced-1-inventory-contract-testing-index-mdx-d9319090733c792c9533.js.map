{"version":3,"sources":["webpack:///./src/pages/developer-advanced-1/inventory-contract-testing/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kiBACA,4LACA,iIACA,mEACA,uBAAK,sBAAMC,WAAW,OAAU,IAA3B,4CAEL,4HACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,4CAEL,wHACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,8FAGL,gJACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,gWAYL,sJACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,gQAUL,4CACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,8LAQL,oLACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,0kBAqBL,kHACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,+eAcL,qEACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,48FAyGL,yDACA,mKAEA,mEACA,sCACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,uMASL,oEACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mQAoBTJ,EAAWK,gBAAiB","file":"component---src-pages-developer-advanced-1-inventory-contract-testing-index-mdx-d9319090733c792c9533.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bala/Documents/gsi-cloudnative-squad/ibm-gsi-cloudnative-journeyV1.1/ibm-gsi-cloudnative-journey/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`We have already explained why we need contract-testing and how it works, In this guide, we would implement contract-testing in the Inventory application. In the inventory application, inventory-Service provides stock items and works as a provider, and Inventory BFF works as a consumer. Microservices work in isolation, and it is the consumerâ€™s responsibility to generate contact and the pact-broker responsibility to verify response for the given request. In this guide, we will explain how to generate a contract(Pact).`}</p>\n    <p>{`We will use a readymade inventory BFF application, which we have developed in the developer Intermediate guide and implement contract-testing on top of it.        `}</p>\n    <p>{`To start with, we have to create a pact by providing parameters like consumer, provider, port, log, dir.`}</p>\n    <p>{`We can take consumerName from package.json`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const consumerName = npmPackage.name;\n`}</code></pre>\n    <p>{`We can provide a provider name, for inventory application inventory-management-svc is the provider.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`provider: 'inventory-management-svc',\n`}</code></pre>\n    <p>{`Next we have to provide log, and pacts directory, contract would be stored in pacts directory. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`log: resolve(process.cwd(), \"logs\", \"pact.log\"),\ndir: resolve(process.cwd(), \"pacts\"),\n`}</code></pre>\n    <p>{`Here is code with pact setup. Delay of 30000 added for local testing, though for cluster deployment it is not required.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`beforeAll(() => {\n    provider = new Pact({\n      consumer: consumerName,\n      provider: 'inventory-management-svc',      \n      port,\n      log: resolve(process.cwd(), \"logs\", \"pact.log\"),\n      dir: resolve(process.cwd(), \"pacts\"),\n    });\n    console.log(\"in before all, provider setup\");\n    return provider.setup();\n  },30000);\n`}</code></pre>\n    <p>{`An instance of the component that will be tested is loaded and configured with the pact server host and port as the base url.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`let classUnderTest: StockItemsApi;\n  beforeEach(() => {    \n    Container.bind(StockItemServiceConfig).factory(() => ({\n        baseUrl: \\`http://localhost:\\${port}\\`\n        \n      }));\n\n    classUnderTest = Container.get(StockItemsApi);\n  });\n`}</code></pre>\n    <p>{`Add expected result`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const expectedResult: BackendStockItem = {\n        id: '1234',\n        manufacturer: 'My manufacturer',\n        name: 'product name',\n        price: 20.0,\n        stock: 1000\n};\n`}</code></pre>\n    <p>{`Here is the add interaction, which publishes the interaction to the Pact server so that it can be used to provide a mock response when the request is made.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`beforeEach(() => {        \n        return provider.addInteraction({\n          state: 'base state',\n          uponReceiving: 'a request for stock items',\n          withRequest: {\n            method: 'GET',\n            path: '/stock-items',\n            headers: {\n              'Accept': 'application/json',\n            }\n          },\n          willRespondWith: {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: Matchers.eachLike(expectedResult),\n          }\n        });\n      });\n`}</code></pre>\n    <p>{`Here is the test, that matched each and every attribute of response with expected result.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`test('should return inventory data', async () => {\n        const result = await classUnderTest.listStockItems();\n\n        expect(result).toEqual([{\n          id: expectedResult.id,\n          name: expectedResult.name,\n          description: expectedResult.name,\n          stock: expectedResult.stock,\n          unitPrice: expectedResult.price,\n          manufacturer: expectedResult.manufacturer,\n          picture: 'https://via.placeholder.com/32.png',\n        }]);\n      });\n`}</code></pre>\n    <p>{`Here is the final code for contract testing.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import {join, resolve} from 'path';\nimport {Container} from 'typescript-ioc';\nimport {Matchers, Pact} from '@pact-foundation/pact';\n\nimport {StockItemsApi} from '../../src/services';\nimport {StockItemServiceConfig} from '../../src/config';\nimport {BackendStockItem} from '../../src/services/stock-items.service';\n\nconst npmPackage = require(join(process.cwd(), 'package.json'));\n\nconst consumerName = npmPackage.name;\n\ndescribe('stock-items.service', () => {\n  test('canary verifies test infrastructure', () => {\n    console.log(\"in test infrastructure\");\n    expect(true).toEqual(true);\n  });\n\n  const port = 1235;\n  let provider: Pact;\n  beforeAll(() => {\n    provider = new Pact({\n      consumer: consumerName,\n      provider: 'inventory-management-svc',\n      //provider: 'inventory-management-svc-solution-yks',      \n      port,\n      log: resolve(process.cwd(), \"logs\", \"pact.log\"),\n      dir: resolve(process.cwd(), \"pacts\"),\n    });\n    console.log(\"in before all, provider setup\");\n    return provider.setup();\n  },30000);\n\n  let classUnderTest: StockItemsApi;\n  beforeEach(() => {\n    console.log(\"in before each---35\");\n    Container.bind(StockItemServiceConfig).factory(() => ({\n        baseUrl: \\`http://localhost:\\${port}\\`\n        \n      }));\n\n    classUnderTest = Container.get(StockItemsApi);\n  });\n\n  afterAll(() => {\n    console.log(\"in afterAll, going to finalize\");    \n    return provider.finalize();\n  });\n\n  \n\n  context('given listStockItems()', () => {\n    context('when called', () => {\n      \n      const expectedResult: BackendStockItem = {\n        id: '1234',\n        manufacturer: 'My manufacturer',\n        name: 'product name',\n        price: 20.0,\n        stock: 1000\n      };\n\n      beforeEach(() => {\n        console.log(\"in before each\"+ provider.server);\n        return provider.addInteraction({\n          state: 'base state',\n          uponReceiving: 'a request for stock items',\n          withRequest: {\n            method: 'GET',\n            path: '/stock-items',\n            headers: {\n              'Accept': 'application/json',\n            }\n          },\n          willRespondWith: {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: Matchers.eachLike(expectedResult),\n          }\n        });\n      });\n\n      test('should return inventory data', async () => {\n        const result = await classUnderTest.listStockItems();\n\n        expect(result).toEqual([{\n          id: expectedResult.id,\n          name: expectedResult.name,\n          description: expectedResult.name,\n          stock: expectedResult.stock,\n          unitPrice: expectedResult.price,\n          manufacturer: expectedResult.manufacturer,\n          picture: 'https://via.placeholder.com/32.png',\n        }]);\n      });\n\n      afterEach(() => {\n        return provider.verify();\n      });\n    });\n  });\n});\n`}</code></pre>\n    <p>{`Here is the example of contract:`}</p>\n    <p>{`##A pact between inventory-management-bff and inventory-management-svc\nRequests from inventory-management-bff to inventory-management-svc`}</p>\n    <p>{`A request for stock items given base state`}</p>\n    <h2>{`Interactions`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Given base state, upon receiving a request for stock items from graphql-ts-yks, with\n{\n  \"method\": \"GET\",\n  \"path\": \"/stock-items\",\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  }\n}\n`}</code></pre>\n    <p>{`inventory-management-svc will respond with:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  \"status\": 200,\n  \"headers\": {\n    \"Content-Type\": \"application/json\"\n  },\n  \"body\": [\n    {\n      \"id\": \"1234\",\n      \"manufacturer\": \"My manufacturer\",\n      \"name\": \"product name\",\n      \"price\": 20,\n      \"stock\": 1000\n    }\n  ]\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}