(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"+vZh":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return a})),t.d(n,"default",(function(){return p}));t("91GP"),t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("q1tI");var r=t("7ljp"),o=t("013z");t("T0C+"),t("qKvR");function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var a={},s={_frontmatter:a},i=o.a;function p(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["components"]);return Object(r.b)(i,c({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"We have already explained why we need contract-testing and how it works, In this guide, we would implement contract-testing in the Inventory application. In the inventory application, inventory-Service provides stock items and works as a provider, and Inventory BFF works as a consumer. Microservices work in isolation, and it is the consumerâ€™s responsibility to generate contact and the pact-broker responsibility to verify response for the given request. In this guide, we will explain how to generate a contract(Pact)."),Object(r.b)("p",null,"We will use a readymade inventory BFF application, which we have developed in the developer Intermediate guide and implement contract-testing on top of it.        "),Object(r.b)("p",null,"To start with, we have to create a pact by providing parameters like consumer, provider, port, log, dir."),Object(r.b)("p",null,"We can take consumerName from package.json"),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),"const consumerName = npmPackage.name;\n")),Object(r.b)("p",null,"We can provide a provider name, for inventory application inventory-management-svc is the provider."),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),"provider: 'inventory-management-svc',\n")),Object(r.b)("p",null,"Next we have to provide log, and pacts directory, contract would be stored in pacts directory. "),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),'log: resolve(process.cwd(), "logs", "pact.log"),\ndir: resolve(process.cwd(), "pacts"),\n')),Object(r.b)("p",null,"Here is code with pact setup. Delay of 30000 added for local testing, though for cluster deployment it is not required."),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),'beforeAll(() => {\n    provider = new Pact({\n      consumer: consumerName,\n      provider: \'inventory-management-svc\',      \n      port,\n      log: resolve(process.cwd(), "logs", "pact.log"),\n      dir: resolve(process.cwd(), "pacts"),\n    });\n    console.log("in before all, provider setup");\n    return provider.setup();\n  },30000);\n')),Object(r.b)("p",null,"An instance of the component that will be tested is loaded and configured with the pact server host and port as the base url."),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),"let classUnderTest: StockItemsApi;\n  beforeEach(() => {    \n    Container.bind(StockItemServiceConfig).factory(() => ({\n        baseUrl: `http://localhost:${port}`\n        \n      }));\n\n    classUnderTest = Container.get(StockItemsApi);\n  });\n")),Object(r.b)("p",null,"Add expected result"),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),"const expectedResult: BackendStockItem = {\n        id: '1234',\n        manufacturer: 'My manufacturer',\n        name: 'product name',\n        price: 20.0,\n        stock: 1000\n};\n")),Object(r.b)("p",null,"Here is the add interaction, which publishes the interaction to the Pact server so that it can be used to provide a mock response when the request is made."),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),"beforeEach(() => {        \n        return provider.addInteraction({\n          state: 'base state',\n          uponReceiving: 'a request for stock items',\n          withRequest: {\n            method: 'GET',\n            path: '/stock-items',\n            headers: {\n              'Accept': 'application/json',\n            }\n          },\n          willRespondWith: {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: Matchers.eachLike(expectedResult),\n          }\n        });\n      });\n")),Object(r.b)("p",null,"Here is the test, that matched each and every attribute of response with expected result."),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),"test('should return inventory data', async () => {\n        const result = await classUnderTest.listStockItems();\n\n        expect(result).toEqual([{\n          id: expectedResult.id,\n          name: expectedResult.name,\n          description: expectedResult.name,\n          stock: expectedResult.stock,\n          unitPrice: expectedResult.price,\n          manufacturer: expectedResult.manufacturer,\n          picture: 'https://via.placeholder.com/32.png',\n        }]);\n      });\n")),Object(r.b)("p",null,"Here is the final code for contract testing."),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),"import {join, resolve} from 'path';\nimport {Container} from 'typescript-ioc';\nimport {Matchers, Pact} from '@pact-foundation/pact';\n\nimport {StockItemsApi} from '../../src/services';\nimport {StockItemServiceConfig} from '../../src/config';\nimport {BackendStockItem} from '../../src/services/stock-items.service';\n\nconst npmPackage = require(join(process.cwd(), 'package.json'));\n\nconst consumerName = npmPackage.name;\n\ndescribe('stock-items.service', () => {\n  test('canary verifies test infrastructure', () => {\n    console.log(\"in test infrastructure\");\n    expect(true).toEqual(true);\n  });\n\n  const port = 1235;\n  let provider: Pact;\n  beforeAll(() => {\n    provider = new Pact({\n      consumer: consumerName,\n      provider: 'inventory-management-svc',\n      //provider: 'inventory-management-svc-solution-yks',      \n      port,\n      log: resolve(process.cwd(), \"logs\", \"pact.log\"),\n      dir: resolve(process.cwd(), \"pacts\"),\n    });\n    console.log(\"in before all, provider setup\");\n    return provider.setup();\n  },30000);\n\n  let classUnderTest: StockItemsApi;\n  beforeEach(() => {\n    console.log(\"in before each---35\");\n    Container.bind(StockItemServiceConfig).factory(() => ({\n        baseUrl: `http://localhost:${port}`\n        \n      }));\n\n    classUnderTest = Container.get(StockItemsApi);\n  });\n\n  afterAll(() => {\n    console.log(\"in afterAll, going to finalize\");    \n    return provider.finalize();\n  });\n\n  \n\n  context('given listStockItems()', () => {\n    context('when called', () => {\n      \n      const expectedResult: BackendStockItem = {\n        id: '1234',\n        manufacturer: 'My manufacturer',\n        name: 'product name',\n        price: 20.0,\n        stock: 1000\n      };\n\n      beforeEach(() => {\n        console.log(\"in before each\"+ provider.server);\n        return provider.addInteraction({\n          state: 'base state',\n          uponReceiving: 'a request for stock items',\n          withRequest: {\n            method: 'GET',\n            path: '/stock-items',\n            headers: {\n              'Accept': 'application/json',\n            }\n          },\n          willRespondWith: {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: Matchers.eachLike(expectedResult),\n          }\n        });\n      });\n\n      test('should return inventory data', async () => {\n        const result = await classUnderTest.listStockItems();\n\n        expect(result).toEqual([{\n          id: expectedResult.id,\n          name: expectedResult.name,\n          description: expectedResult.name,\n          stock: expectedResult.stock,\n          unitPrice: expectedResult.price,\n          manufacturer: expectedResult.manufacturer,\n          picture: 'https://via.placeholder.com/32.png',\n        }]);\n      });\n\n      afterEach(() => {\n        return provider.verify();\n      });\n    });\n  });\n});\n")),Object(r.b)("p",null,"Here is the example of contract:"),Object(r.b)("p",null,"##A pact between inventory-management-bff and inventory-management-svc\nRequests from inventory-management-bff to inventory-management-svc"),Object(r.b)("p",null,"A request for stock items given base state"),Object(r.b)("h2",null,"Interactions"),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),'Given base state, upon receiving a request for stock items from graphql-ts-yks, with\n{\n  "method": "GET",\n  "path": "/stock-items",\n  "headers": {\n    "Accept": "application/json"\n  }\n}\n')),Object(r.b)("p",null,"inventory-management-svc will respond with:"),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{}),'{\n  "status": 200,\n  "headers": {\n    "Content-Type": "application/json"\n  },\n  "body": [\n    {\n      "id": "1234",\n      "manufacturer": "My manufacturer",\n      "name": "product name",\n      "price": 20,\n      "stock": 1000\n    }\n  ]\n}\n')))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-developer-advanced-1-inventory-contract-testing-index-mdx-61f3c6fd45f9140007ee.js.map