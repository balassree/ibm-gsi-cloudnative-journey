{"componentChunkName":"component---src-pages-developer-intermediate-inventory-app-index-mdx","path":"/developer-intermediate/inventory-app/","result":{"pageContext":{"frontmatter":{"title":"Inventory Application"},"relativePagePath":"/developer-intermediate/inventory-app/index.mdx","titleType":"page","MdxNode":{"id":"cc6ee4d1-acd4-557a-a1ea-94c55ef0c54d","children":[],"parent":"3f7b0c1b-6502-5e86-a600-4c41f10a9319","internal":{"content":"---\ntitle: Inventory Application\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nDevelop and deploy an example microservices application\n\n</PageDescription>\n\nDevelop an example application with a three-tier microservices architecture and deploy it in IBM Cloud Kubernetes Service or Red Hat OpenShift on IBM Cloud using the <Globals name=\"longName\" /> <Globals name=\"env\" /> including its <Globals name=\"templates\" />.\n\n## Business Need\n\nIn this guide, imagine you have completed an [Enterprise Design Thinking Workshop](https://www.ibm.com/garage/method/practices/think/enterprise-design-thinking/) and the result is an MVP statement that defines the desired business outcomes. Use the steps below to help deliver this MVP quickly while following [Garage Method best practices](https://www.ibm.com/garage/method/cloud/).\n\n### MVP Statement\n\nAn [MVP](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/) is a [first hill](https://www.ibm.com/garage/method/practices/think/practice_hills/). Here's the hill statement for the MVP we're going to build:\n\n- **Who**: Distribution employees in each of the regional warehouses\n\n- **What**: A secure web application that enables easy access to list of product [SKU](https://en.wikipedia.org/wiki/Stock_keeping_unit) inventory levels and inventory locations\n\n- **Wow**: Make the system appealing and easy to use. Deliver it hosted on the IBM Cloud platform. Develop it quickly as a [minimum viable product](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/). Use the latest managed container runtimes and DevOps best practices to enable post MVP feature improvements. Simulate a release to a  _Test_ environment.\n\n## Architecture\n\nWe will build the Micro App using a three-tier microservices architecture. Each tier encapsulates a clean separation of concerns. Each app component will be modelled using _microservices_ and use a number of [polyglot](https://searchsoftwarequality.techtarget.com/definition/polyglot-programming) programming languages and frameworks. Data will be stored in IBM Cloudant and the Micro App will be secured using IBM App ID.\n\n![Architecture](images/architecture.png)\n\n### User interface\n\nThe Micro App's user interface will look like this [wireframe](https://www.ibm.com/garage/method/practices/think/practice_wireframes/):\n\n![UI Design](/images/inventory-ui-design.png)\n\n### Technical Requirements\nThe Micro App should adhere to the following technical requirements:\n\n- Microservices\n    - Stateless\n    - REST APIs\n    - Polyglot\n- DevOps with CI/CD (continuous integration and continuous delivery)\n    - Monitoring and logging\n    - Code analysis\n    - App security\n- Deployed to Red Hat OpenShift on IBM Cloud or IBM Cloud Kubernetes Service\n- Follow the [Carbon Design System](https://www.carbondesignsystem.com/) user experience\n\n## Guide\n\nYou will approach creating the Micro App bottom up, meaning you will start by creating the backend microservice that manages integration with the data persistence and then build out the digital channel using a backend for frontend pattern. Finally, you will add a web UI to the solution.\n\n\n\n","type":"Mdx","contentDigest":"8b3dc46eb01b4cd3d939960a74c047c1","counter":959,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Inventory Application"},"exports":{},"rawBody":"---\ntitle: Inventory Application\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nDevelop and deploy an example microservices application\n\n</PageDescription>\n\nDevelop an example application with a three-tier microservices architecture and deploy it in IBM Cloud Kubernetes Service or Red Hat OpenShift on IBM Cloud using the <Globals name=\"longName\" /> <Globals name=\"env\" /> including its <Globals name=\"templates\" />.\n\n## Business Need\n\nIn this guide, imagine you have completed an [Enterprise Design Thinking Workshop](https://www.ibm.com/garage/method/practices/think/enterprise-design-thinking/) and the result is an MVP statement that defines the desired business outcomes. Use the steps below to help deliver this MVP quickly while following [Garage Method best practices](https://www.ibm.com/garage/method/cloud/).\n\n### MVP Statement\n\nAn [MVP](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/) is a [first hill](https://www.ibm.com/garage/method/practices/think/practice_hills/). Here's the hill statement for the MVP we're going to build:\n\n- **Who**: Distribution employees in each of the regional warehouses\n\n- **What**: A secure web application that enables easy access to list of product [SKU](https://en.wikipedia.org/wiki/Stock_keeping_unit) inventory levels and inventory locations\n\n- **Wow**: Make the system appealing and easy to use. Deliver it hosted on the IBM Cloud platform. Develop it quickly as a [minimum viable product](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/). Use the latest managed container runtimes and DevOps best practices to enable post MVP feature improvements. Simulate a release to a  _Test_ environment.\n\n## Architecture\n\nWe will build the Micro App using a three-tier microservices architecture. Each tier encapsulates a clean separation of concerns. Each app component will be modelled using _microservices_ and use a number of [polyglot](https://searchsoftwarequality.techtarget.com/definition/polyglot-programming) programming languages and frameworks. Data will be stored in IBM Cloudant and the Micro App will be secured using IBM App ID.\n\n![Architecture](images/architecture.png)\n\n### User interface\n\nThe Micro App's user interface will look like this [wireframe](https://www.ibm.com/garage/method/practices/think/practice_wireframes/):\n\n![UI Design](/images/inventory-ui-design.png)\n\n### Technical Requirements\nThe Micro App should adhere to the following technical requirements:\n\n- Microservices\n    - Stateless\n    - REST APIs\n    - Polyglot\n- DevOps with CI/CD (continuous integration and continuous delivery)\n    - Monitoring and logging\n    - Code analysis\n    - App security\n- Deployed to Red Hat OpenShift on IBM Cloud or IBM Cloud Kubernetes Service\n- Follow the [Carbon Design System](https://www.carbondesignsystem.com/) user experience\n\n## Guide\n\nYou will approach creating the Micro App bottom up, meaning you will start by creating the backend microservice that manages integration with the data persistence and then build out the digital channel using a backend for frontend pattern. Finally, you will add a web UI to the solution.\n\n\n\n","fileAbsolutePath":"/Users/bala/Documents/gsi-cloudnative-squad/ibm-gsi-cloudnative-journeyV1.1/ibm-gsi-cloudnative-journey/src/pages/developer-intermediate/inventory-app/index.mdx"}}}}