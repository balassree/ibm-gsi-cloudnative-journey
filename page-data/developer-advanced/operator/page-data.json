{"componentChunkName":"component---src-pages-developer-advanced-operator-index-mdx","path":"/developer-advanced/operator/","result":{"pageContext":{"frontmatter":{"title":"Operator"},"relativePagePath":"/developer-advanced/operator/index.mdx","titleType":"page","MdxNode":{"id":"276a61bf-ebd9-5a74-b346-fbad8eda337a","children":[],"parent":"8cb5ba82-0b64-5b8f-8d60-fdc5a5b33337","internal":{"content":"---\ntitle: Operator\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n## Introduction\n  - Operators serve as a packaging mechanism for distributing applications on Kubernetes, and they monitor, maintain, recover, and upgrade the software they deploy.\n\n\n  - An Operator is a Kubernetes-native set of resources, defined as a controller combined with one or more custom resource definitions. The controller is custom code that is deployed to a Kubernetes cluster and is designed to watch for changes to custom Kubernetes resources and react to them. \n     https://kubernetes.io/docs/concepts/extend-kubernetes/operator/\n\n\n  - Operators are clients of the Kubernetes API that act as controllers for a Custom Resource.\n      To write applications that use the Kubernetes REST API, you can use one of the following supported client libraries:\n    - Go,\n    - Python,\n    - Java,\n    - CSharp dotnet,\n    - JavaScript,\n    - Haskell.\n\n### How Operators Work\n\nOperators work by extending the Kubernetes control plane and API. In its simplest form, an Operator adds an endpoint to the Kubernetes API, called a custom resource (CR), along with a control plane component that monitors and maintains resources of the new type. \n\n ![Model](images/OperatorArch.png)\n\n\n###  Operator maturity model\n\nConceptually, an Operator takes human operational knowledge and encodes it into software that is more easily packaged and shared with consumers. How you approach and build your Operator is up to you. Advanced Operators are designed to handle upgrades seamlessly, react to failures automatically, and not take shortcuts, such as skipping a software backup process to save time.\n\n- There are a number of entry points into developing Operators depending on where you are coming from. Red Hat describes the maturity of each as follows:\n\n![Model](images/FirstSteps.png)\n\n\n### Operator Framework\n\nOperators give you a convenient way to package, deploy, manage and distribute applications for Kubernetes. \n\n- The method allows you to package configuration so that users can deploy operators from a simple catalog without having to engage administrators. You can distribute operators beyond your organization using OperatorHub.io which is open to all contributions or the Red Hat OpenShift OperatorHub using Red Hat's certification process. \n\n![Model](images/OperatorFramework.png)\n\n\n#### Operator SDK \n  \n\nAllows developers to build, package and test an Operator based on your expertise without requiring all the knowledge of Kubernetes API complexities\n\n![Model](images/OperatorSDK.png)\n\n#### Operator Lifecycle Manager (OLM)\n\nHelps you to deploy, and update, and generally manage the lifecycle of all of the Operators (and their associated services) running across your clusters\n\n#### Operatorhub.io \n\nPublishing platform for Kubernetes Operators, allows for easy discovery and install of Operators using a graphical user interface\n\n#### Overview of the OperatorHub\n\nAt the OperatorHub.io, you find ready to use operators written by the community.\n\n- The OperatorHub is available via the OpenShift Container Platform web console and is the interface that cluster administrators use to discover and install Operators. \n\n![Model](images/OperatorTypes.png)\n\n\n\n\n\n### Learn more\n\nLearn more about using Operators:\n<AnchorLinks>\n  <AnchorLink to=\"https://coreos.com/operators/\">Operators</AnchorLink>\n  <AnchorLink to=\"https://github.com/operator-framework\">Operator Framework</AnchorLink>\n  <AnchorLink to=\"https://kubernetes.io/docs/concepts/extend-kubernetes/operator/ \">Kubernetes – operator pattern</AnchorLink>\n  <AnchorLink to=\"https://docs.openshift.com/container-platform/4.3/operators/operator_sdk/osdk-getting-started.html\">OpenShift 4.3 - Getting started with the Operator SDK </AnchorLink>\n  <AnchorLink to=\"https://blog.openshift.com/operators-on-ocp-4-x/\">Operators on Red Hat OpenShift 4.x</AnchorLink>\n  <AnchorLink to=\"https://www.redhat.com/en/resources/oreilly-kubernetes-operators-automation-ebook\">O’Reilly: Kubernetes Operators: Automating the Container Orchestration Platform</AnchorLink>\n</AnchorLinks>","type":"Mdx","contentDigest":"38304cb7c20345693a1e8c83f87e58b7","counter":854,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Operator"},"exports":{},"rawBody":"---\ntitle: Operator\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n## Introduction\n  - Operators serve as a packaging mechanism for distributing applications on Kubernetes, and they monitor, maintain, recover, and upgrade the software they deploy.\n\n\n  - An Operator is a Kubernetes-native set of resources, defined as a controller combined with one or more custom resource definitions. The controller is custom code that is deployed to a Kubernetes cluster and is designed to watch for changes to custom Kubernetes resources and react to them. \n     https://kubernetes.io/docs/concepts/extend-kubernetes/operator/\n\n\n  - Operators are clients of the Kubernetes API that act as controllers for a Custom Resource.\n      To write applications that use the Kubernetes REST API, you can use one of the following supported client libraries:\n    - Go,\n    - Python,\n    - Java,\n    - CSharp dotnet,\n    - JavaScript,\n    - Haskell.\n\n### How Operators Work\n\nOperators work by extending the Kubernetes control plane and API. In its simplest form, an Operator adds an endpoint to the Kubernetes API, called a custom resource (CR), along with a control plane component that monitors and maintains resources of the new type. \n\n ![Model](images/OperatorArch.png)\n\n\n###  Operator maturity model\n\nConceptually, an Operator takes human operational knowledge and encodes it into software that is more easily packaged and shared with consumers. How you approach and build your Operator is up to you. Advanced Operators are designed to handle upgrades seamlessly, react to failures automatically, and not take shortcuts, such as skipping a software backup process to save time.\n\n- There are a number of entry points into developing Operators depending on where you are coming from. Red Hat describes the maturity of each as follows:\n\n![Model](images/FirstSteps.png)\n\n\n### Operator Framework\n\nOperators give you a convenient way to package, deploy, manage and distribute applications for Kubernetes. \n\n- The method allows you to package configuration so that users can deploy operators from a simple catalog without having to engage administrators. You can distribute operators beyond your organization using OperatorHub.io which is open to all contributions or the Red Hat OpenShift OperatorHub using Red Hat's certification process. \n\n![Model](images/OperatorFramework.png)\n\n\n#### Operator SDK \n  \n\nAllows developers to build, package and test an Operator based on your expertise without requiring all the knowledge of Kubernetes API complexities\n\n![Model](images/OperatorSDK.png)\n\n#### Operator Lifecycle Manager (OLM)\n\nHelps you to deploy, and update, and generally manage the lifecycle of all of the Operators (and their associated services) running across your clusters\n\n#### Operatorhub.io \n\nPublishing platform for Kubernetes Operators, allows for easy discovery and install of Operators using a graphical user interface\n\n#### Overview of the OperatorHub\n\nAt the OperatorHub.io, you find ready to use operators written by the community.\n\n- The OperatorHub is available via the OpenShift Container Platform web console and is the interface that cluster administrators use to discover and install Operators. \n\n![Model](images/OperatorTypes.png)\n\n\n\n\n\n### Learn more\n\nLearn more about using Operators:\n<AnchorLinks>\n  <AnchorLink to=\"https://coreos.com/operators/\">Operators</AnchorLink>\n  <AnchorLink to=\"https://github.com/operator-framework\">Operator Framework</AnchorLink>\n  <AnchorLink to=\"https://kubernetes.io/docs/concepts/extend-kubernetes/operator/ \">Kubernetes – operator pattern</AnchorLink>\n  <AnchorLink to=\"https://docs.openshift.com/container-platform/4.3/operators/operator_sdk/osdk-getting-started.html\">OpenShift 4.3 - Getting started with the Operator SDK </AnchorLink>\n  <AnchorLink to=\"https://blog.openshift.com/operators-on-ocp-4-x/\">Operators on Red Hat OpenShift 4.x</AnchorLink>\n  <AnchorLink to=\"https://www.redhat.com/en/resources/oreilly-kubernetes-operators-automation-ebook\">O’Reilly: Kubernetes Operators: Automating the Container Orchestration Platform</AnchorLink>\n</AnchorLinks>","fileAbsolutePath":"/Users/bala/Documents/gsi-cloudnative-squad/ibm-gsi-cloudnative-journeyV1.1/ibm-gsi-cloudnative-journey/src/pages/developer-advanced/operator/index.mdx"}}}}