{"componentChunkName":"component---src-pages-developer-foundation-activities-labs-lab-8-index-mdx","path":"/developer-foundation/activities/labs/lab8/","result":{"pageContext":{"frontmatter":{"title":"Kubernetes Lab 8 - Services"},"relativePagePath":"/developer-foundation/activities/labs/lab8/index.mdx","titleType":"page","MdxNode":{"id":"9428a374-1833-58ad-8bd8-62439d39c295","children":[],"parent":"0115e3c2-af54-5e87-be7e-ff244635dbc7","internal":{"content":"---\ntitle: Kubernetes Lab 8 - Services\n---\n\n## Problem\n\nWe have a `jedi-deployment` and `yoda-deployment` that need to communicate with others.  The `jedi` needs to talk to the world(outside the cluster), while `yoda` only needs to talk to jedi council(others in the cluster).\n\n## Solution\n\n- Examine the two deployments, and create two services that meet the following criteria:\n\n**jedi-svc**\n - The service name is `jedi-svc`.\n - The service exposes the pod replicas managed by the deployment named `jedi-deployment`.\n - The service listens on port `80` and its targetPort matches the port exposed by the pods.\n - The service type is `NodePort`.\n\n**yoda-svc**\n - The service name is `yoda-svc`.\n - The service exposes the pod replicas managed by the deployment named `yoda-deployment`.\n - The service listens on port `80` and its targetPort matches the port exposed by the pods.\n - The service type is `ClusterIP`.\n\n### Setup environment:\n\n - Execute the command to create the deployements  using below definition.\n\n ```shell script\n  kubectl apply -f https://gist.githubusercontent.com/csantanapr/87df4292e94441617707dae5de488cf4/raw/cb515f7bae77a3f0e76fdc7f6aa0f4e89cc5fec7/lab-8-service-setup.yaml\n  ```\n - Create two sevices **jedi-svc** & **yoda-svc** using below yam definition.\n\n    ```yaml\n    apiVersion: v1\n    kind: Service\n    metadata:\n    name: jedi-svc\n    spec:\n    type: NodePort\n    selector:\n        app: jedi\n    ports:\n    - protocol: TCP\n        port: 80\n        targetPort: 8080\n    ```\n\n    ```yaml\n    apiVersion: v1\n    kind: Service\n    metadata:\n    name: yoda-svc\n    spec:\n    type: ClusterIP\n    selector:\n        app: yoda\n    ports:\n    - protocol: TCP\n        port: 80\n        targetPort: 8080\n    ```\n - Execute the below commands to creating services.\n\n ```shell script\n  oc apply -f jedi-svc.yaml -n {DEV_NAMESPACE}\n  oc apply -f oda-svc.yaml -n {DEV_NAMESPACE}\n  ```  ","type":"Mdx","contentDigest":"ae38a4ed6cdc09e1853ce9c055823311","counter":1009,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Kubernetes Lab 8 - Services"},"exports":{},"rawBody":"---\ntitle: Kubernetes Lab 8 - Services\n---\n\n## Problem\n\nWe have a `jedi-deployment` and `yoda-deployment` that need to communicate with others.  The `jedi` needs to talk to the world(outside the cluster), while `yoda` only needs to talk to jedi council(others in the cluster).\n\n## Solution\n\n- Examine the two deployments, and create two services that meet the following criteria:\n\n**jedi-svc**\n - The service name is `jedi-svc`.\n - The service exposes the pod replicas managed by the deployment named `jedi-deployment`.\n - The service listens on port `80` and its targetPort matches the port exposed by the pods.\n - The service type is `NodePort`.\n\n**yoda-svc**\n - The service name is `yoda-svc`.\n - The service exposes the pod replicas managed by the deployment named `yoda-deployment`.\n - The service listens on port `80` and its targetPort matches the port exposed by the pods.\n - The service type is `ClusterIP`.\n\n### Setup environment:\n\n - Execute the command to create the deployements  using below definition.\n\n ```shell script\n  kubectl apply -f https://gist.githubusercontent.com/csantanapr/87df4292e94441617707dae5de488cf4/raw/cb515f7bae77a3f0e76fdc7f6aa0f4e89cc5fec7/lab-8-service-setup.yaml\n  ```\n - Create two sevices **jedi-svc** & **yoda-svc** using below yam definition.\n\n    ```yaml\n    apiVersion: v1\n    kind: Service\n    metadata:\n    name: jedi-svc\n    spec:\n    type: NodePort\n    selector:\n        app: jedi\n    ports:\n    - protocol: TCP\n        port: 80\n        targetPort: 8080\n    ```\n\n    ```yaml\n    apiVersion: v1\n    kind: Service\n    metadata:\n    name: yoda-svc\n    spec:\n    type: ClusterIP\n    selector:\n        app: yoda\n    ports:\n    - protocol: TCP\n        port: 80\n        targetPort: 8080\n    ```\n - Execute the below commands to creating services.\n\n ```shell script\n  oc apply -f jedi-svc.yaml -n {DEV_NAMESPACE}\n  oc apply -f oda-svc.yaml -n {DEV_NAMESPACE}\n  ```  ","fileAbsolutePath":"/Users/bala/Documents/gsi-cloudnative-squad/ibm-gsi-cloudnative-journeyV1.1/ibm-gsi-cloudnative-journey/src/pages/developer-foundation/activities/labs/lab8/index.mdx"}}}}